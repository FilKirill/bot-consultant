import asyncio
import logging
import gspread
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from oauth2client.service_account import ServiceAccountCredentials
import g4f
from config_reader import config
from data.db_session import global_init, create_session
from data.users import User
import concurrent.futures
import asyncio
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=config.bot_token.get_secret_value(), default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
global_init('user.db')


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    db_sess = create_session()
    user = db_sess.get(User, message.from_user.id)

    if user:
        await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {user.name}! üëã")
        await show_subjects_keyboard(message)
    else:
        await message.answer("‚ùå –≠—Ç–æ—Ç –±–æ—Ç –Ω–µ –¥–ª—è —Ç–µ–±—è ‚ùå")


async def show_subjects_keyboard(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏."""
    keyboard = InlineKeyboardBuilder()

    subjects = ["–ö–æ–¥–∏–Ω–≥", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ê–Ø"]  # –ü—Ä–µ–¥–º–µ—Ç—ã
    emojis = {"–ö–æ–¥–∏–Ω–≥": "üíª", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "üìê", "–ê–Ø": "üìö"}  # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤

    for subject in subjects:
        keyboard.add(
            types.InlineKeyboardButton(
                text=f"{emojis.get(subject, 'üìò')} {subject}",
                callback_data=f"subject_{subject}"
            )
        )

    await message.answer("üìú –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–∏ –¥–æ–ª–≥–∏:", reply_markup=keyboard.as_markup())


@dp.callback_query(lambda c: c.data.startswith("subject_"))
async def process_subject_callback(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞."""
    subject = callback_query.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    db_sess = create_session()
    user = db_sess.get(User, callback_query.from_user.id)

    if user:
        first_name = user.name
        waiting_message = await callback_query.message.answer("‚åõ –ò—â–µ–º –≤–∞—à–∏ –¥–æ–ª–≥–∏...")

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–æ–ª–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        debts = await get_debts_from_google_sheets(first_name)

        if subject in debts:
            sheet_data = debts[subject]
            header = sheet_data.get("header", [])
            scores = sheet_data.get("scores", [])

            if header and scores:
                below_50 = [header[i] for i, score in enumerate(scores) if score.isdigit() and int(score) < 50]

                if below_50:
                    await waiting_message.delete()
                    await show_themes_keyboard(subject, below_50, callback_query.message)
                else:
                    await waiting_message.edit_text(f"‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–ª–≥–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É *{subject}*!")
            else:
                await waiting_message.edit_text(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É *{subject}*.")
        else:
            await waiting_message.edit_text(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É *{subject}*.")
    else:
        await callback_query.message.answer("‚ùå –≠—Ç–æ—Ç –±–æ—Ç –Ω–µ –¥–ª—è —Ç–µ–±—è ‚ùå")


async def show_themes_keyboard(subject, themes, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º-–¥–æ–ª–≥–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = InlineKeyboardBuilder()

    for theme in themes:
        keyboard.add(
            types.InlineKeyboardButton(
                text=theme,  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
                callback_data=f"debt_{subject}_{theme}"  # –î–∞–Ω–Ω—ã–µ –¥–ª—è callback
            )
        )

    await message.answer(
        f"üìö –í–æ—Ç —Ç–≤–æ–∏ –¥–æ–ª–≥–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É *{subject}*!\n\n"
        f"–ó–∞ –ø–æ–º–æ—â—å—é –Ω–∞–∂–º–∏ –Ω–∞ —Ç–µ–º—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:",
        reply_markup=keyboard.as_markup()
    )


@dp.callback_query(lambda c: c.data.startswith("debt_"))
async def process_debt_callback(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
    _, subject, theme = callback_query.data.split("_")  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏ —Ç–µ–º—É

    await callback_query.message.answer(f"‚åõ –ò—â—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–º—ã: *{theme}*...")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ g4f
    prompt = f"–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Å–æ–≤–µ—Ç—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–º—ã '{theme}' –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject}'. –í–∫–ª—é—á–∏ –ø—Ä–∏–º–µ—Ä—ã –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã."

    try:
        response = g4f.ChatCompletion.create(
            model=g4f.models.gpt_4,
            messages=[{"role": "user", "content": f"–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–µ–¥–º–µ—Ç–æ–º {subject}. –ú–Ω–µ –Ω–µ –æ—á–µ–Ω—å –ø–æ–Ω—è—Ç–Ω–∞ —Ç–µ–º–∞ {theme}. –î–∞–π –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–∞—Ä—É –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∫–∞–∫ –º–æ–∂–Ω–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å. 3 –í–∞—Ä–∏–∞–Ω—Ç–∞."}],
        )

        recommendations = "".join(response) if isinstance(response, list) else response

        await callback_query.message.answer(
            f"üìò –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–º—ã *{theme}* –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É *{subject}*:\n\n{recommendations}"
        )

    except Exception as e:
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ g4f: {e}")


async def get_debts_from_google_sheets(user_name):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets."""
    loop = asyncio.get_event_loop()

    with concurrent.futures.ThreadPoolExecutor() as pool:
        result = await loop.run_in_executor(pool, fetch_debts, user_name)

    return result

def fetch_debts(user_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets."""
    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    credentials = ServiceAccountCredentials.from_json_keyfile_name('secret_key.json', scope)
    client = gspread.authorize(credentials)

    spreadsheet = client.open('—Ç–µ—Å—Ç')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã
    sheets = ['–ö–æ–¥–∏–Ω–≥', '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–ê–Ø']

    results = {}
    for sheet in sheets:
        worksheet = spreadsheet.worksheet(sheet)

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
            cell = worksheet.find(user_name)
            row_data = worksheet.row_values(cell.row)
            header = worksheet.row_values(1)  # –¢–µ–º—ã ‚Äî –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
            results[sheet] = {
                "header": header[1:],  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É (–∏–º–µ–Ω–∞)
                "scores": row_data[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É (–∏–º—è)
            }
        except gspread.exceptions.CellNotFound:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º –ª–∏—Å—Ç–µ
            continue

    return results

async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω')